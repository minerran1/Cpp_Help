#define SIZE 5            /* Size of Circular Queue */
int CQ[SIZE], f = -1, r = -1; /* Global declarations */
 
CQinsert(int elem) { /* Function for Insert operation */
 if (CQfull())
  printf("\n\n Overflow!!!!\n\n");
 else {
  if (f == -1)
   f = 0;
  r = (r + 1) % SIZE;
  CQ[r] = elem;
 }
}
 
int CQdelete() { /* Function for Delete operation */
 int elem;
 if (CQempty()) {
  printf("\n\nUnderflow!!!!\n\n");
  return (-1);
 } else {
  elem = CQ[f];
  if (f == r) {
   f = -1;
   r = -1;
  } /* Q has only one element ? */
  else
   f = (f + 1) % SIZE;
  return (elem);
 }
}
 
int CQfull() { /* Function to Check Circular Queue Full */
 if ((f == r + 1) || (f == 0 && r == SIZE - 1))
  return 1;
 return 0;
}
 
int CQempty() { /* Function to Check Circular Queue Empty */
 if (f == -1)
  return 1;
 return 0;
}