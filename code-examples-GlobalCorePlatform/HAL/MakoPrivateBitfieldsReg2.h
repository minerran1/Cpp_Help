// {{{RME classifier 'Logical View::HAL Instantiation::RF Deck::Deployment::mako::MakoPrivateHeaders::MakoPrivateBitfieldsReg2'

#ifndef MakoPrivateBitfieldsReg2_H
#define MakoPrivateBitfieldsReg2_H

#ifdef PRAGMA
#pragma interface "MakoPrivateBitfieldsReg2.h"
#endif

#include <HALtestLib_win32.h>
#include <MakoPrivate.h>
#include <bitfield.h>
#include <rf_audio_std_types.h>

// {{{RME tool 'OT::Cpp' property 'HeaderPreface'
// {{{USR

// *******************************************************************************************************
//                      MAKO ID and Control Device specific bitfield macros
// *******************************************************************************************************

// MAKO bits:            |31|30|29|28|27|26|25|24|23|22|21|20|19|18|17|16|15|14|13|12|11|10|9|8|7|6|5|4|3|2|1|0|
// Field:                |RW| Address|<--  MAKO_SUBCOMP_DATA -- >                                              |          

// D31       RW:       Read/~Write 
// D30 - D28 Address:  Address of this Mako register, $001 for DC regulator component 
// D27 - D0  MAKO_SUBCOMP_DATA: subcomponent field
// D27 - D26 ID_CTRL_SEL  select the ID_CTL destination/source register DAT0, DAT1, or DAT2

// *******************************************************************************************************

#define MAKO_ID_CTRL_REGISTER_ADDR 002    // Register base for this sub-component within Mako

// write these to MAKO_ID_CTRL_SEL_BITFIELD bitfield to address the register
// address of one wire, Ignition sense, wd timer


#define MAKO_ID_CTRL_DAT0_ADDR 0
#define MAKO_CHCK_REGISTER_ADDRESS     MAKO_ID_CTRL_DAT0_ADDR
#define MAKO_1WIRE_REGISTER_ADDRESS    MAKO_ID_CTRL_DAT0_ADDR
#define MAKO_WD_REGISTER_ADDRESS       MAKO_ID_CTRL_DAT0_ADDR
#define MAKO_IGNSENSE_REGISTER_ADDRESS MAKO_ID_CTRL_DAT0_ADDR

// interrupt register 
#define MAKO_ID_CTRL_DAT1_ADDR 1
#define MAKO_INT_REGISTER_ADDRESS       MAKO_ID_CTRL_DAT1_ADDR

// ssi register
#define MAKO_ID_CTRL_DAT2_ADDR 2
				

// ID control register select D27-D26
#define MAKO_ID_CTRL_REGSEL_FIELD_LSBBIT_26 26

// FOR DAT0 configuration
// do this first, when accessing DAT0 1-wire, IGN, WD timer, etc. fields:
// setBitField( &wrData, MAKO_ID_CTRL_REGSEL_BITFIELD, MAKO_ID_CTRL_DAT0_ADDR);

// D22 MAKO_ID_CTRL_CHCK
#define MAKO_ID_CTRL_CHCK_FIELD_LSBBIT_22 22

// D21 MAKO_ID_CTRL_BAS_BAND_EN
#define MAKO_ID_CTRL_BAS_BAND_EN_FIELD_LSBBIT_21 21

// D20 MAKO_ID_CTRL_BAT_BUS_EN
#define MAKO_ID_CTRL_BAT_BUS_EN_FIELD_LSBBIT_20 20

// D19 MAKO_ID_CTRL_ONE_WIRE_EN1
#define MAKO_ID_CTRL_ONE_WIRE_EN1_FIELD_LSBBIT_19 19

// D18 MAKO_ID_CTRL_ONE_WIRE_EN2
#define MAKO_ID_CTRL_ONE_WIRE_EN2_FIELD_LSBBIT_18 18

// D17 MAKO_ID_CTRL_WD_TIC
#define MAKO_ID_CTRL_WD_TIC_FIELD_LSBBIT_17 17

// D16 MAKO_ID_CTRL_VTS
#define MAKO_ID_CTRL_VTS_FIELD_LSBBIT_16 16

// D15 MAKO_ID_CTRL_STL
#define MAKO_ID_CTRL_STL_FIELD_LSBBIT_15 15

// Dc MAKO_ID_CTRL_LLT
#define MAKO_ID_CTRL_LLT_FIELD_LSBBIT_14 14

// D13-D12 MAKO_ID_CTRL_IGN_MODE
#define MAKO_IGN_MODE_MAXVAL 3
#define MAKO_ID_CTRL_IGN_MODE_FIELD_LSBBIT_12 12

// D11 MAKO_ID_CTRL_OFF_DELAY
#define MAKO_ID_CTRL_OFF_DELAY_FIELD_LSBBIT_11 11

// D10 MAKO_ID_CTRL_IGN_PIN
#define MAKO_ID_CTRL_IGN_PIN_FIELD_LSBBIT_10 10

// D9-D7 MAKO_ID_CTRL_ID
#define MAKO_ID_CTRL_ID0_FIELD_LSBBIT_7 7

// D6-D4 MAKO_ID_CTRL_REV
#define MAKO_ID_CTRL_REV_FIELD_LSBBIT_4 4

// D14 MAKO_ID_CTRL_EMERG_ON
#define MAKO_ID_CTRL_EMERG_ON_FIELD_LSBBIT_14 14

//D13 MAKO_ID_CTRL_SHUTDOWN
#define MAKO_ID_CTRL_SHUTDOWN_FIELD_LSBBIT_13 13

//D12 MAKO_ID_CTRL_PA_SHORT
#define MAKO_ID_CTRL_PA_SHORT_FIELD_LSBBIT_12 12

//D11 MAKO_ID_CTRL_RTC_ON
#define MAKO_ID_CTRL_RTC_ON_FIELD_LSBBIT_11 11

//D9-D7 MAKO_ID_CTRL_ID
#define MAKO_ID_CTRL_ID1_FIELD_LSBBIT_7 7

//D6 MAKO_ID_CTRL_EMERG_INT
#define MAKO_ID_CTRL_EMERG_INT_FIELD_LSBBIT_6 6

//D5 MAKO_ID_CTRL_SDI
#define MAKO_ID_CTRL_SDI_FIELD_LSBBIT_5 5

//D4 MAKO_ID_CTRL_PA_INT
#define MAKO_ID_CTRL_PA_INT_FIELD_LSBBIT_4 4

//D3 MAKO_ID_CTRL_RTC_INT
#define MAKO_ID_CTRL_RTC_INT_FIELD_LSBBIT_3 3

//D2 MAKO_ID_CTRL_RTC_RST
#define MAKO_ID_CTRL_RTC_RST_FIELD_LSBBIT_2 2

// FOR DAT2 configuration
// do this first, when accessing DAT1 ssi, etc. fields:
// setBitField( &wrData, MAKO_ID_CTRL_REGSEL_BITFIELD, MAKO_ID_CTRL_DAT2_ADDR);

// D23-D21 MAKO_ID_CTRL_SSI_RATE
#define MAKO_ID_CTRL_SSI_RATE_FIELD_LSBBIT_21 21

// D20-D16 MAKO_ID_CTRL_CODEC_SLOT
#define MAKO_ID_CTRL_CODEC_SLOT_FIELD_LSBBIT_16 16

// D15 MAKO_ID_CTRL_SSI_PRG_EN
#define MAKO_ID_CTRL_SSI_PRG_EN_FIELD_LSBBIT_15 15
// D14-D10 MAKO_ID_CTRL_CODEC_CTRL_SLOT
#define MAKO_ID_CTRL_CODEC_CTRL_SLOT_FIELD_LSBBIT_10 10

// mako chip ID. value read will be all zeros for mako
// D9-D7 MAKO_ID_CTRL_ID
#define MAKO_ID_CTRL_ID2_FIELD_LSBBIT_7 7

// D6 MAKO_ID_CTRL_SS_OUT_EN
#define MAKO_ID_CTRL_SS_OUT_EN_FIELD_LSBBIT_6 6
// D5-D1 MAKO_ID_CTRL_UCM_SLOT
#define MAKO_ID_CTRL_UCM_SLOT_FIELD_LSBBIT_1 1



defineBitField( MAKO_ID_CTRL_REGSEL_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_REGSEL_FIELD_LSBBIT_26, MAKO_BITFIELD_SIZE_2);

defineBitField( MAKO_ID_CTRL_CHCK_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_CHCK_FIELD_LSBBIT_22, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_BAS_BAND_EN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_BAS_BAND_EN_FIELD_LSBBIT_21, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_BAT_BUS_EN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_BAT_BUS_EN_FIELD_LSBBIT_20, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_ONE_WIRE_EN1_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_ONE_WIRE_EN1_FIELD_LSBBIT_19, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_ONE_WIRE_EN2_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_ONE_WIRE_EN2_FIELD_LSBBIT_18, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_WD_TIC_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_WD_TIC_FIELD_LSBBIT_17, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_VTS_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_VTS_FIELD_LSBBIT_16, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_STL_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_STL_FIELD_LSBBIT_15, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_LLT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_LLT_FIELD_LSBBIT_14, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_IGN_MODE_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_IGN_MODE_FIELD_LSBBIT_12, MAKO_BITFIELD_SIZE_2);

defineBitField( MAKO_ID_CTRL_OFF_DELAY_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_OFF_DELAY_FIELD_LSBBIT_11, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_IGN_PIN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_IGN_PIN_FIELD_LSBBIT_10, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_ID0_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_ID0_FIELD_LSBBIT_7, MAKO_BITFIELD_SIZE_3);

defineBitField( MAKO_ID_CTRL_REV_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_REV_FIELD_LSBBIT_4, MAKO_BITFIELD_SIZE_3);

// FOR DAT1 configuration
// do this first, when accessing DAT1 interrupt, etc. fields:
// setBitField( &wrData, MAKO_ID_CTRL_REGSEL_BITFIELD, MAKO_ID_CTRL_DAT1_ADDR);

defineBitField( MAKO_ID_CTRL_EMERG_ON_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_EMERG_ON_FIELD_LSBBIT_14, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_SHUTDOWN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_SHUTDOWN_FIELD_LSBBIT_13, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_PA_SHORT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_PA_SHORT_FIELD_LSBBIT_12, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_RTC_ON_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_RTC_ON_FIELD_LSBBIT_11, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_ID1_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_ID1_FIELD_LSBBIT_7, MAKO_BITFIELD_SIZE_3);

defineBitField( MAKO_ID_CTRL_EMERG_INT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_EMERG_INT_FIELD_LSBBIT_6, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_SDI_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_SDI_FIELD_LSBBIT_5, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_PA_INT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_PA_INT_FIELD_LSBBIT_4, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_RTC_INT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_RTC_INT_FIELD_LSBBIT_3, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_RTC_RST_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_RTC_RST_FIELD_LSBBIT_2, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_SSI_RATE_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_SSI_RATE_FIELD_LSBBIT_21, MAKO_BITFIELD_SIZE_3);

defineBitField( MAKO_ID_CTRL_CODEC_SLOT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_CODEC_SLOT_FIELD_LSBBIT_16, MAKO_BITFIELD_SIZE_5);

defineBitField( MAKO_ID_CTRL_SSI_PRG_EN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_SSI_PRG_EN_FIELD_LSBBIT_15, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_CODEC_CTRL_SLOT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_CODEC_CTRL_SLOT_FIELD_LSBBIT_10, MAKO_BITFIELD_SIZE_5);

defineBitField( MAKO_ID_CTRL_ID2_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_ID2_FIELD_LSBBIT_7, MAKO_BITFIELD_SIZE_3);

defineBitField( MAKO_ID_CTRL_SS_OUT_EN_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_SS_OUT_EN_FIELD_LSBBIT_6, MAKO_BITFIELD_SIZE_1);

defineBitField( MAKO_ID_CTRL_UCM_SLOT_BITFIELD ,uint32_t,MAKO_ZERO_REGISTER_BASE, MAKO_ID_CTRL_UCM_SLOT_FIELD_LSBBIT_1, MAKO_BITFIELD_SIZE_5);





// }}}USR
// }}}RME

// {{{RME tool 'OT::Cpp' property 'HeaderEnding'
// {{{USR

// }}}USR
// }}}RME

#endif /* MakoPrivateBitfieldsReg2_H */

// }}}RME
