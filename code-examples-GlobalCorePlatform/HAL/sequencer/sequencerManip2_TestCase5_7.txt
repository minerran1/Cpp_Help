#*****************************************************************************************************************
#*                             SEQUENCER MANIP I - TEST CASES 5-7
#*             COPYRIGHT 2002 MOTOROLA, INC. ALL RIGHTS RESERVED.
#*                           MOTOROLA CONFIDENTIAL PROPRIETARY
#*                                       TEMPLATE VERSION R01.00
#*
#****************************************************************************************************************
#===========================================================================================================
#SEQUENCER UNIT TEST Created: 2/12/02
#===========================================================================================================
#The following command sequences will call the sequencer command group and the various sequences found 
#in rfAudioInit.cpp for the purpose of unit testing the Sequencer.
#After executing these command sequences, verify the output with the expected output file.  If the output differs, the sequence being called should be 
#investigated.
#For detailed information, see the unit test sequences in the rfAudioInit.cpp.
#To run this test, copy the contents of this file into the commandSequence.txt file of the test harness server.
#
#NOTE:    If the following command sequences do not produce an output file, open the test.log file, then re-run the test.  There is a known issue with
#the test harness that sometimes prevents the logging of information.
#=======================================================================================================================
#Test Case 5:  MANIPULATE I AND - loads numbers to local and global registers, then uses the bitwise AND operation on the 
#number stored in the register with the same number.  The result should be the same number. (i.e. A*A = A)
#=======================================================================================================================
#   -Start Sequence
2,2,0,4,0x0000000D&
#   -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#   - Start Sequence
2,2,0,4,0x0000000E&
#   -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#   - Start Sequence
2,2,0,4,0x0000000F&
#   -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#=================================================================================================================
#Test Case 6:
#This sequences 'AND's the number stored in the register with a 0, thus producing a zero output.
#=================================================================================================================
2,2,0,4,0x00000010&
#    -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#    - Start Sequence
2,2,0,4,0x00000011&
#    -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#    - Start Sequence
2,2,0,4,0x00000012&
#    -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#=========================================================================================================================
#Test Case 7:  MANIPULATE I OR - loads numbers to local and global registers, then uses the bitwise OR operation on the
#number stored in the register with the same number.  Final value for each register should be the same number as what was loaded.
#==========================================================================================================================
2,2,0,4,0x00000013&
#     -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#    - Start Sequence
2,2,0,4,0x00000008&
#    -Get Global
2,1,4,4,0x00000014&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&
#    - Start Sequence
2,2,0,4,0x00000015&
#    -Get Global
2,1,4,4,0x00000000&
2,1,4,4,0x00000001&
2,1,4,4,0x00000002&
2,1,4,4,0x00000003&
2,1,4,4,0x00000004&
2,1,4,4,0x00000005&
2,1,4,4,0x00000006&
2,1,4,4,0x00000007&
2,1,4,4,0x00000008&
2,1,4,4,0x00000009&
2,1,4,4,0x0000000A&
2,1,4,4,0x0000000B&
2,1,4,4,0x0000000C&
2,1,4,4,0x0000000D&
2,1,4,4,0x0000000E&
2,1,4,4,0x0000000F&